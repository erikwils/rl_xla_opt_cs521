HloModule pmap_train_step, entry_computation_layout={(f32[1,10]{1,0}, f32[1,16,10]{2,1,0}, f32[1,8,16]{2,1,0}, s32[1,8]{1,0})->(f32[1,10]{1,0}, f32[1,16,10]{2,1,0}, f32[1]{0})}

%region_1.43 (Arg_0.44: pred[], Arg_1.45: pred[]) -> pred[] {
  %Arg_0.44 = pred[] parameter(0)
  %Arg_1.45 = pred[] parameter(1)
  ROOT %and.46 = pred[] and(%Arg_0.44, %Arg_1.45)
}

%region_0.31 (Arg_0.32: f32[], Arg_1.33: f32[]) -> f32[] {
  %Arg_0.32 = f32[] parameter(0)
  %Arg_1.33 = f32[] parameter(1)
  ROOT %maximum.34 = f32[] maximum(%Arg_0.32, %Arg_1.33)
}

%take_along_axis.47 (Arg_0.48: f32[8,10], Arg_1.49: s32[8,1]) -> (f32[8,1], s32[8,1,1]) {
  %Arg_1.49 = s32[8,1]{1,0} parameter(1)
  %constant.59 = s32[] constant(0)
  %broadcast.60 = s32[8,1]{1,0} broadcast(%constant.59), dimensions={}
  %compare.61 = pred[8,1]{1,0} compare(%Arg_1.49, %broadcast.60), direction=LT
  %constant.56 = s32[] constant(10)
  %broadcast.57 = s32[8,1]{1,0} broadcast(%constant.56), dimensions={}
  %add.62 = s32[8,1]{1,0} add(%Arg_1.49, %broadcast.57)
  %select.63 = s32[8,1]{1,0} select(%compare.61, %add.62, %Arg_1.49)
  %reshape.64 = s32[8,1,1]{2,1,0} reshape(%select.63)
  %constant.54 = s32[] constant(0)
  %broadcast.55 = s32[8,1,1]{2,1,0} broadcast(%constant.54), dimensions={}
  %compare.65 = pred[8,1,1]{2,1,0} compare(%reshape.64, %broadcast.55), direction=GE
  %constant.52 = s32[] constant(9)
  %broadcast.53 = s32[8,1,1]{2,1,0} broadcast(%constant.52), dimensions={}
  %compare.66 = pred[8,1,1]{2,1,0} compare(%reshape.64, %broadcast.53), direction=LE
  %and.67 = pred[8,1,1]{2,1,0} and(%compare.65, %compare.66)
  %reshape = pred[8,1]{1,0} reshape(%and.67)
  %Arg_0.48 = f32[8,10]{1,0} parameter(0)
  %gather.69 = f32[8,1]{1,0} gather(%Arg_0.48, %reshape.64), offset_dims={}, collapsed_slice_dims={1}, start_index_map={1}, operand_batching_dims={0}, start_indices_batching_dims={0}, index_vector_dim=2, slice_sizes={1,1}
  %constant.50 = f32[] constant(nan)
  %broadcast.51 = f32[8,1]{1,0} broadcast(%constant.50), dimensions={}
  %select.70 = f32[8,1]{1,0} select(%reshape, %gather.69, %broadcast.51)
  ROOT %tuple.71 = (f32[8,1]{1,0}, s32[8,1,1]{2,1,0}) tuple(%select.70, %reshape.64)
}

%_where.75 (Arg_0.76: pred[], Arg_1.77: s32[], Arg_2.78: s32[]) -> s32[] {
  %Arg_0.76 = pred[] parameter(0)
  %Arg_1.77 = s32[] parameter(1)
  %Arg_2.78 = s32[] parameter(2)
  ROOT %select.79 = s32[] select(%Arg_0.76, %Arg_1.77, %Arg_2.78)
}

%_take.84 (Arg_0.85: f32[8,1], Arg_1.86: s32[]) -> (f32[8], s32[1]) {
  %Arg_1.86 = s32[] parameter(1)
  %constant.92 = s32[] constant(0)
  %compare.93 = pred[] compare(%Arg_1.86, %constant.92), direction=LT
  %constant.91 = s32[] constant(1)
  %add.94 = s32[] add(%Arg_1.86, %constant.91)
  %call.95 = s32[] call(%compare.93, %add.94, %Arg_1.86), to_apply=%_where.75
  %reshape.96 = s32[1]{0} reshape(%call.95)
  %constant.90 = s32[1]{0} constant({0})
  %compare.97 = pred[1]{0} compare(%reshape.96, %constant.90), direction=GE
  %compare.98 = pred[1]{0} compare(%reshape.96, %constant.90), direction=LE
  %and.99 = pred[1]{0} and(%compare.97, %compare.98)
  %reshape.1 = pred[] reshape(%and.99)
  %broadcast.102 = pred[8]{0} broadcast(%reshape.1), dimensions={}
  %Arg_0.85 = f32[8,1]{1,0} parameter(0)
  %gather.101 = f32[8]{0} gather(%Arg_0.85, %reshape.96), offset_dims={0}, collapsed_slice_dims={1}, start_index_map={1}, index_vector_dim=0, slice_sizes={8,1}
  %constant.87 = f32[] constant(nan)
  %broadcast.88 = f32[8]{0} broadcast(%constant.87), dimensions={}
  %select.103 = f32[8]{0} select(%broadcast.102, %gather.101, %broadcast.88)
  ROOT %tuple.104 = (f32[8]{0}, s32[1]{0}) tuple(%select.103, %reshape.96)
}

%region_5.122 (Arg_0.123: f32[], Arg_1.124: f32[]) -> f32[] {
  %Arg_0.123 = f32[] parameter(0)
  %Arg_1.124 = f32[] parameter(1)
  ROOT %add.125 = f32[] add(%Arg_0.123, %Arg_1.124)
}

%_take_0.126 (Arg_0.127: s32[1], Arg_1.128: f32[8]) -> f32[8,1] {
  %constant.129 = f32[] constant(0)
  %broadcast.130 = f32[8,1]{1,0} broadcast(%constant.129), dimensions={}
  %Arg_0.127 = s32[1]{0} parameter(0)
  %Arg_1.128 = f32[8]{0} parameter(1)
  ROOT %scatter.131 = f32[8,1]{1,0} scatter(%broadcast.130, %Arg_0.127, %Arg_1.128), update_window_dims={0}, inserted_window_dims={1}, scatter_dims_to_operand_dims={1}, index_vector_dim=0, to_apply=%region_5.122
}

%take_along_axis_1.137 (Arg_0.138: s32[8,1,1], Arg_1.139: f32[8,1]) -> f32[8,10] {
  %constant.140 = f32[] constant(0)
  %broadcast.141 = f32[8,10]{1,0} broadcast(%constant.140), dimensions={}
  %Arg_0.138 = s32[8,1,1]{2,1,0} parameter(0)
  %Arg_1.139 = f32[8,1]{1,0} parameter(1)
  ROOT %scatter.142 = f32[8,10]{1,0} scatter(%broadcast.141, %Arg_0.138, %Arg_1.139), update_window_dims={}, inserted_window_dims={1}, scatter_dims_to_operand_dims={1}, input_batching_dims={0}, scatter_indices_batching_dims={0}, index_vector_dim=2, to_apply=%region_5.122
}

%region_9.161 (Arg_0.162: f32[], Arg_1.163: f32[]) -> f32[] {
  %Arg_0.162 = f32[] parameter(0)
  %Arg_1.163 = f32[] parameter(1)
  ROOT %add.164 = f32[] add(%Arg_0.162, %Arg_1.163)
}

%region_10.166 (Arg_0.167: f32[], Arg_1.168: f32[]) -> f32[] {
  %Arg_0.167 = f32[] parameter(0)
  %Arg_1.168 = f32[] parameter(1)
  ROOT %add.169 = f32[] add(%Arg_0.167, %Arg_1.168)
}

ENTRY %main.181 (Arg_0.1: f32[1,10], Arg_1.2: f32[1,16,10], Arg_2.3: f32[1,8,16], Arg_3.4: s32[1,8]) -> (f32[1,10], f32[1,16,10], f32[1]) {
  %Arg_0.1 = f32[1,10]{1,0} parameter(0)
  %reshape.23 = f32[10]{0} reshape(%Arg_0.1)
  %Arg_2.3 = f32[1,8,16]{2,1,0} parameter(2)
  %reshape.25 = f32[8,16]{1,0} reshape(%Arg_2.3)
  %Arg_1.2 = f32[1,16,10]{2,1,0} parameter(1)
  %reshape.24 = f32[16,10]{1,0} reshape(%Arg_1.2)
  %dot.26 = f32[8,10]{1,0} dot(%reshape.25, %reshape.24), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  %reshape.28 = f32[10]{0} reshape(%Arg_0.1)
  %broadcast.29 = f32[8,10]{1,0} broadcast(%reshape.28), dimensions={1}
  %add.30 = f32[8,10]{1,0} add(%dot.26, %broadcast.29)
  %constant.22 = f32[] constant(-inf)
  %reduce.35 = f32[8]{0} reduce(%add.30, %constant.22), dimensions={1}, to_apply=%region_0.31
  %reshape.37 = f32[8,1]{1,0} reshape(%reduce.35)
  %reshape.39 = f32[8]{0} reshape(%reshape.37)
  %broadcast.40 = f32[8,10]{1,0} broadcast(%reshape.39), dimensions={0}
  %subtract.41 = f32[8,10]{1,0} subtract(%add.30, %broadcast.40)
  %Arg_3.4 = s32[1,8]{1,0} parameter(3)
  %reshape.42 = s32[8,1]{1,0} reshape(%Arg_3.4)
  %call.72 = (f32[8,1]{1,0}, s32[8,1,1]{2,1,0}) call(%subtract.41, %reshape.42), to_apply=%take_along_axis.47
  %get-tuple-element.74 = s32[8,1,1]{2,1,0} get-tuple-element(%call.72), index=1
  %get-tuple-element.73 = f32[8,1]{1,0} get-tuple-element(%call.72), index=0
  %constant.20 = s32[] constant(0)
  %call.105 = (f32[8]{0}, s32[1]{0}) call(%get-tuple-element.73, %constant.20), to_apply=%_take.84
  %get-tuple-element.107 = s32[1]{0} get-tuple-element(%call.105), index=1
  %constant.13 = f32[] constant(-0.125)
  %broadcast.14 = f32[8]{0} broadcast(%constant.13), dimensions={}
  %call.132 = f32[8,1]{1,0} call(%get-tuple-element.107, %broadcast.14), to_apply=%_take_0.126
  %call.143 = f32[8,10]{1,0} call(%get-tuple-element.74, %call.132), to_apply=%take_along_axis_1.137
  %constant.15 = f32[] constant(0.125)
  %broadcast.16 = f32[8]{0} broadcast(%constant.15), dimensions={}
  %exponential.108 = f32[8,10]{1,0} exponential(%subtract.41)
  %constant.21 = f32[] constant(0)
  %reduce.113 = f32[8]{0} reduce(%exponential.108, %constant.21), dimensions={1}, to_apply=%region_5.122
  %divide.144 = f32[8]{0} divide(%broadcast.16, %reduce.113)
  %broadcast.145 = f32[8,10]{1,0} broadcast(%divide.144), dimensions={0}
  %multiply.146 = f32[8,10]{1,0} multiply(%broadcast.145, %exponential.108)
  %add.147 = f32[8,10]{1,0} add(%call.143, %multiply.146)
  %reduce.152 = f32[10]{0} reduce(%add.147, %constant.21), dimensions={0}, to_apply=%region_5.122
  %reshape.153 = f32[1,10]{1,0} reshape(%reduce.152)
  %reshape.6 = f32[10]{0} reshape(%reshape.153)
  %all-reduce.165 = f32[10]{0} all-reduce(%reshape.6), replica_groups={{0}}, to_apply=%region_9.161
  %constant.7 = f32[] constant(-0.01)
  %broadcast.8 = f32[10]{0} broadcast(%constant.7), dimensions={}
  %multiply.173 = f32[10]{0} multiply(%all-reduce.165, %broadcast.8)
  %add.175 = f32[10]{0} add(%reshape.23, %multiply.173)
  %reshape.177 = f32[1,10]{1,0} reshape(%add.175)
  %dot = f32[16,10]{0,1} dot(%reshape.25, %add.147), lhs_contracting_dims={0}, rhs_contracting_dims={0}
  %all-reduce.170 = f32[16,10]{0,1} all-reduce(%dot), replica_groups={{0}}, to_apply=%region_10.166
  %constant.5 = f32[] constant(-0.01)
  %broadcast.6 = f32[16,10]{1,0} broadcast(%constant.5), dimensions={}
  %multiply.174 = f32[16,10]{0,1} multiply(%all-reduce.170, %broadcast.6)
  %add.176 = f32[16,10]{1,0} add(%reshape.24, %multiply.174)
  %reshape.178 = f32[1,16,10]{2,1,0} reshape(%add.176)
  %log.114 = f32[8]{0} log(%reduce.113)
  %get-tuple-element.106 = f32[8]{0} get-tuple-element(%call.105), index=0
  %subtract.115 = f32[8]{0} subtract(%log.114, %get-tuple-element.106)
  %reduce.120 = f32[] reduce(%subtract.115, %constant.21), dimensions={0}, to_apply=%region_5.122
  %constant = f32[] constant(0.125)
  %multiply = f32[] multiply(%reduce.120, %constant)
  %reshape.179 = f32[1]{0} reshape(%multiply)
  ROOT %tuple.180 = (f32[1,10]{1,0}, f32[1,16,10]{2,1,0}, f32[1]{0}) tuple(%reshape.177, %reshape.178, %reshape.179)
}



