HloModule test_algebraic_simplifier_13, entry_computation_layout={()->(f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}, /*index=5*/f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0})}

ENTRY %main () -> (f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], /*index=5*/f32[2,3,4], f32[2,3,4]) {
  %constant_pi = f32[] constant(3.14159), origin={{"constant_pi"}}
  %pi_array = f32[2,3,4]{2,1,0} broadcast(%constant_pi), dimensions={}, origin={{"pi_array"}}
  %constant_e = f32[] constant(2.71828), origin={{"constant_e"}}
  %e_array = f32[2,3,4]{2,1,0} broadcast(%constant_e), dimensions={}, origin={{"e_array"}}
  %sqrt.anon = f32[2,3,4]{2,1,0} sqrt(%e_array), origin={{"sqrt.anon"}}
  %broadcast.2 = f32[2,3,4]{2,1,0} broadcast(%constant_e), dimensions={}, origin={{"broadcast.2"}}
  %constant_one = f32[] constant(1), origin={{"constant_one"}}
  %broadcast.16 = f32[2,3,4]{2,1,0} broadcast(%constant_one), dimensions={}, origin={{"broadcast.16"}}
  %constant.1 = f32[] constant(1), origin={{"constant.1"}}
  %broadcast.10 = f32[2,3,4]{2,1,0} broadcast(%constant.1), dimensions={}, origin={{"broadcast.10"}}
  %broadcast.26 = f32[2,3,4]{2,1,0} broadcast(%constant_e), dimensions={}, origin={{"broadcast.26"}}
  %constant_two = f32[] constant(2), origin={{"constant_two"}}
  %broadcast.19 = f32[2,3,4]{2,1,0} broadcast(%constant_two), dimensions={}, origin={{"broadcast.19"}}
  %sub_self_13_5.1 = f32[] subtract(%constant_e, %constant_e), origin={{"sub_self_13_5.1"}}
  %broadcast.7 = f32[2,3,4]{2,1,0} broadcast(%sub_self_13_5.1), dimensions={}, origin={{"broadcast.7"}}
  %broadcast.30 = f32[2,3,4]{2,1,0} broadcast(%constant_two), dimensions={}, origin={{"broadcast.30"}}
  ROOT %result = (f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}, /*index=5*/f32[2,3,4]{2,1,0}, f32[2,3,4]{2,1,0}) tuple(%broadcast.2, %broadcast.16, %broadcast.10, %broadcast.26, %broadcast.19, /*index=5*/%broadcast.7, %broadcast.30), origin={({"broadcast.2"}, {"broadcast.16"}, {"broadcast.10"}, {"broadcast.26"}, {"broadcast.19"}, {"broadcast.7"}, {"broadcast.30"})}
  %constant = f32[] constant(1), origin={{"constant"}}
  %broadcast.23 = f32[2,3,4]{2,1,0} broadcast(%constant), dimensions={}, origin={{"broadcast.23"}}
  %sqrt.anon.1 = f32[] sqrt(%constant_e), origin={{"sqrt.anon.1"}}
  %broadcast.4 = f32[2,3,4]{2,1,0} broadcast(%sqrt.anon.1), dimensions={}, origin={{"broadcast.4"}}
  %multiply = f32[2,3,4]{2,1,0} multiply(%broadcast.4, %broadcast.4), origin={{"multiply"}}
  %negate = f32[] negate(%constant_e), origin={{"negate"}}
  %broadcast.27 = f32[2,3,4]{2,1,0} broadcast(%negate), dimensions={}, origin={{"broadcast.27"}}
  %add = f32[2,3,4]{2,1,0} add(%e_array, %broadcast.27), origin={{"add"}}
}



