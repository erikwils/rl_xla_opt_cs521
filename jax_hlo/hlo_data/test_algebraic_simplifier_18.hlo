HloModule test_algebraic_simplifier_18, entry_computation_layout={()->(f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, /*index=5*/f32[16]{0}, f32[16]{0}, f32[16]{0})}

ENTRY %main () -> (f32[16], f32[16], f32[16], f32[16], f32[16], /*index=5*/f32[16], f32[16], f32[16]) {
  %constant_pi = f32[] constant(3.14159)
  %pi_array = f32[16]{0} broadcast(%constant_pi), dimensions={}
  %constant_e = f32[] constant(2.71828)
  %e_array = f32[16]{0} broadcast(%constant_e), dimensions={}
  %constant_two = f32[] constant(2)
  %two_array = f32[16]{0} broadcast(%constant_two), dimensions={}
  %constant_one = f32[] constant(1)
  %one_array = f32[16]{0} broadcast(%constant_one), dimensions={}
  %mul_one_18_0 = f32[16]{0} multiply(%two_array, %one_array)
  %constant_neg_one = f32[] constant(-1)
  %neg_one_array = f32[16]{0} broadcast(%constant_neg_one), dimensions={}
  %multiply.anon = f32[16]{0} multiply(%neg_one_array, %one_array)
  %constant_zero = f32[] constant(0)
  %zero_array = f32[16]{0} broadcast(%constant_zero), dimensions={}
  %complex_add_mul_18_1 = f32[16]{0} add(%multiply.anon, %zero_array)
  %constant_half = f32[] constant(0.5)
  %half_array = f32[16]{0} broadcast(%constant_half), dimensions={}
  %sub_zero_18_2 = f32[16]{0} subtract(%half_array, %zero_array)
  %sqrt.anon = f32[16]{0} sqrt(%neg_one_array)
  %square_sqrt_18_3 = f32[16]{0} power(%sqrt.anon, %two_array)
  %sub_self_18_4 = f32[16]{0} subtract(%neg_one_array, %neg_one_array)
  %complex_combo_18_combo_0 = f32[16]{0} subtract(%mul_one_18_0, %square_sqrt_18_3)
  %complex_combo_18_combo_1 = f32[16]{0} multiply(%sub_zero_18_2, %complex_add_mul_18_1)
  %complex_combo_18_combo_2 = f32[16]{0} add(%complex_combo_18_combo_0, %square_sqrt_18_3)
  ROOT %result = (f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, /*index=5*/f32[16]{0}, f32[16]{0}, f32[16]{0}) tuple(%mul_one_18_0, %complex_add_mul_18_1, %sub_zero_18_2, %square_sqrt_18_3, %sub_self_18_4, /*index=5*/%complex_combo_18_combo_0, %complex_combo_18_combo_1, %complex_combo_18_combo_2)
}



