HloModule test_algebraic_simplifier_16, entry_computation_layout={()->(f32[4,4]{1,0}, f32[4,4]{1,0}, f32[4,4]{1,0}, f32[4,4]{1,0}, f32[4,4]{1,0}, /*index=5*/f32[4,4]{1,0})}

ENTRY %main () -> (f32[4,4], f32[4,4], f32[4,4], f32[4,4], f32[4,4], /*index=5*/f32[4,4]) {
  %constant_half = f32[] constant(0.5)
  %half_array = f32[4,4]{1,0} broadcast(%constant_half), dimensions={}
  %constant_two = f32[] constant(2)
  %two_array = f32[4,4]{1,0} broadcast(%constant_two), dimensions={}
  %sqrt.anon = f32[4,4]{1,0} sqrt(%two_array)
  %square_sqrt_16_0 = f32[4,4]{1,0} power(%sqrt.anon, %two_array)
  %constant_zero = f32[] constant(0)
  %zero_array = f32[4,4]{1,0} broadcast(%constant_zero), dimensions={}
  %add.anon = f32[4,4]{1,0} add(%zero_array, %two_array)
  %complex_sub_add_16_1 = f32[4,4]{1,0} subtract(%add.anon, %two_array)
  %constant_one = f32[] constant(1)
  %one_array = f32[4,4]{1,0} broadcast(%constant_one), dimensions={}
  %mul_two_16_2 = f32[4,4]{1,0} multiply(%one_array, %two_array)
  %sub_self_16_3 = f32[4,4]{1,0} subtract(%one_array, %one_array)
  %complex_combo_16_combo_0 = f32[4,4]{1,0} add(%complex_sub_add_16_1, %mul_two_16_2)
  %complex_combo_16_combo_1 = f32[4,4]{1,0} subtract(%complex_sub_add_16_1, %sub_self_16_3)
  ROOT %result = (f32[4,4]{1,0}, f32[4,4]{1,0}, f32[4,4]{1,0}, f32[4,4]{1,0}, f32[4,4]{1,0}, /*index=5*/f32[4,4]{1,0}) tuple(%square_sqrt_16_0, %complex_sub_add_16_1, %mul_two_16_2, %sub_self_16_3, %complex_combo_16_combo_0, /*index=5*/%complex_combo_16_combo_1)
}



