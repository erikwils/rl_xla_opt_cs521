module @jit_monte_carlo_call_price_for_hlo attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<f32> {mhlo.layout_mode = "default"}, %arg1: tensor<f32> {mhlo.layout_mode = "default"}, %arg2: tensor<f32> {mhlo.layout_mode = "default"}, %arg3: tensor<f32> {mhlo.layout_mode = "default"}, %arg4: tensor<f32> {mhlo.layout_mode = "default"}, %arg5: tensor<2xui32> {mhlo.layout_mode = "default"}) -> (tensor<f32> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %0 = call @_normal(%arg5) : (tensor<2xui32>) -> tensor<1000xf32>
    %1 = stablehlo.multiply %arg4, %arg4 : tensor<f32>
    %cst = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %2 = stablehlo.multiply %cst, %1 : tensor<f32>
    %3 = stablehlo.subtract %arg3, %2 : tensor<f32>
    %4 = stablehlo.multiply %3, %arg2 : tensor<f32>
    %5 = stablehlo.sqrt %arg2 : tensor<f32>
    %6 = stablehlo.multiply %arg4, %5 : tensor<f32>
    %7 = stablehlo.convert %6 : tensor<f32>
    %8 = stablehlo.broadcast_in_dim %7, dims = [] : (tensor<f32>) -> tensor<1000xf32>
    %9 = stablehlo.multiply %8, %0 : tensor<1000xf32>
    %10 = stablehlo.convert %4 : tensor<f32>
    %11 = stablehlo.broadcast_in_dim %10, dims = [] : (tensor<f32>) -> tensor<1000xf32>
    %12 = stablehlo.add %11, %9 : tensor<1000xf32>
    %13 = stablehlo.exponential %12 : tensor<1000xf32>
    %14 = stablehlo.convert %arg0 : tensor<f32>
    %15 = stablehlo.broadcast_in_dim %14, dims = [] : (tensor<f32>) -> tensor<1000xf32>
    %16 = stablehlo.multiply %15, %13 : tensor<1000xf32>
    %17 = stablehlo.convert %arg1 : tensor<f32>
    %18 = stablehlo.broadcast_in_dim %17, dims = [] : (tensor<f32>) -> tensor<1000xf32>
    %19 = stablehlo.subtract %16, %18 : tensor<1000xf32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %20 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<1000xf32>
    %21 = stablehlo.maximum %19, %20 : tensor<1000xf32>
    %22 = stablehlo.negate %arg3 : tensor<f32>
    %23 = stablehlo.multiply %22, %arg2 : tensor<f32>
    %24 = stablehlo.exponential %23 : tensor<f32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %25 = stablehlo.reduce(%21 init: %cst_1) applies stablehlo.add across dimensions = [0] : (tensor<1000xf32>, tensor<f32>) -> tensor<f32>
    %cst_2 = stablehlo.constant dense<1.000000e+03> : tensor<f32>
    %26 = stablehlo.divide %25, %cst_2 : tensor<f32>
    %27 = stablehlo.convert %24 : tensor<f32>
    %28 = stablehlo.multiply %27, %26 : tensor<f32>
    return %28 : tensor<f32>
  }
  func.func private @_normal(%arg0: tensor<2xui32> {mhlo.layout_mode = "default"}) -> (tensor<1000xf32> {mhlo.layout_mode = "default"}) {
    %0 = call @_normal_real(%arg0) : (tensor<2xui32>) -> tensor<1000xf32>
    return %0 : tensor<1000xf32>
  }
  func.func private @_normal_real(%arg0: tensor<2xui32> {mhlo.layout_mode = "default"}) -> (tensor<1000xf32> {mhlo.layout_mode = "default"}) {
    %cst = stablehlo.constant dense<-0.99999994> : tensor<f32>
    %cst_0 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %0 = call @_uniform(%arg0, %cst, %cst_0) : (tensor<2xui32>, tensor<f32>, tensor<f32>) -> tensor<1000xf32>
    %1 = chlo.erf_inv %0 : tensor<1000xf32> -> tensor<1000xf32>
    %cst_1 = stablehlo.constant dense<1.41421354> : tensor<f32>
    %2 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<1000xf32>
    %3 = stablehlo.multiply %2, %1 : tensor<1000xf32>
    return %3 : tensor<1000xf32>
  }
  func.func private @_uniform(%arg0: tensor<2xui32> {mhlo.layout_mode = "default"}, %arg1: tensor<f32> {mhlo.layout_mode = "default"}, %arg2: tensor<f32> {mhlo.layout_mode = "default"}) -> (tensor<1000xf32> {mhlo.layout_mode = "default"}) {
    %0 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<1xf32>
    %1 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<1xf32>
    %2 = stablehlo.iota dim = 0 : tensor<1000xui32>
    %3 = stablehlo.slice %arg0 [0:1] : (tensor<2xui32>) -> tensor<1xui32>
    %4 = stablehlo.reshape %3 : (tensor<1xui32>) -> tensor<ui32>
    %5 = stablehlo.slice %arg0 [1:2] : (tensor<2xui32>) -> tensor<1xui32>
    %6 = stablehlo.reshape %5 : (tensor<1xui32>) -> tensor<ui32>
    %7 = stablehlo.slice %2 [0:500] : (tensor<1000xui32>) -> tensor<500xui32>
    %8 = stablehlo.slice %2 [500:1000] : (tensor<1000xui32>) -> tensor<500xui32>
    %c = stablehlo.constant dense<[13, 15, 26, 6]> : tensor<4xui32>
    %c_0 = stablehlo.constant dense<[17, 29, 16, 24]> : tensor<4xui32>
    %9 = stablehlo.xor %4, %6 : tensor<ui32>
    %c_1 = stablehlo.constant dense<466688986> : tensor<ui32>
    %10 = stablehlo.xor %9, %c_1 : tensor<ui32>
    %11 = stablehlo.broadcast_in_dim %4, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %12 = stablehlo.add %7, %11 : tensor<500xui32>
    %13 = stablehlo.broadcast_in_dim %6, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %14 = stablehlo.add %8, %13 : tensor<500xui32>
    %c_2 = stablehlo.constant dense<0> : tensor<i32>
    %c_3 = stablehlo.constant dense<0> : tensor<i32>
    %15:9 = stablehlo.while(%iterArg = %c_3, %iterArg_6 = %c_2, %iterArg_7 = %12, %iterArg_8 = %14, %iterArg_9 = %6, %iterArg_10 = %10, %iterArg_11 = %4, %iterArg_12 = %c, %iterArg_13 = %c_0) : tensor<i32>, tensor<i32>, tensor<500xui32>, tensor<500xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
     cond {
      %c_14 = stablehlo.constant dense<5> : tensor<i32>
      %31 = stablehlo.compare  LT, %iterArg, %c_14,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
      stablehlo.return %31 : tensor<i1>
    } do {
      %31:8 = func.call @None(%iterArg_6, %iterArg_7, %iterArg_8, %iterArg_9, %iterArg_10, %iterArg_11, %iterArg_12, %iterArg_13) : (tensor<i32>, tensor<500xui32>, tensor<500xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>) -> (tensor<i32>, tensor<500xui32>, tensor<500xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>)
      %c_14 = stablehlo.constant dense<1> : tensor<i32>
      %32 = stablehlo.add %iterArg, %c_14 : tensor<i32>
      stablehlo.return %32, %31#0, %31#1, %31#2, %31#3, %31#4, %31#5, %31#6, %31#7 : tensor<i32>, tensor<i32>, tensor<500xui32>, tensor<500xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
    }
    %16 = stablehlo.concatenate %15#2, %15#3, dim = 0 : (tensor<500xui32>, tensor<500xui32>) -> tensor<1000xui32>
    %c_4 = stablehlo.constant dense<9> : tensor<ui32>
    %17 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<ui32>) -> tensor<1000xui32>
    %18 = stablehlo.shift_right_logical %16, %17 : tensor<1000xui32>
    %c_5 = stablehlo.constant dense<1065353216> : tensor<ui32>
    %19 = stablehlo.broadcast_in_dim %c_5, dims = [] : (tensor<ui32>) -> tensor<1000xui32>
    %20 = stablehlo.or %18, %19 : tensor<1000xui32>
    %21 = stablehlo.bitcast_convert %20 : (tensor<1000xui32>) -> tensor<1000xf32>
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %22 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<1000xf32>
    %23 = stablehlo.subtract %21, %22 : tensor<1000xf32>
    %24 = stablehlo.subtract %1, %0 : tensor<1xf32>
    %25 = stablehlo.broadcast_in_dim %24, dims = [0] : (tensor<1xf32>) -> tensor<1000xf32>
    %26 = stablehlo.multiply %23, %25 : tensor<1000xf32>
    %27 = stablehlo.broadcast_in_dim %0, dims = [0] : (tensor<1xf32>) -> tensor<1000xf32>
    %28 = stablehlo.add %26, %27 : tensor<1000xf32>
    %29 = stablehlo.broadcast_in_dim %0, dims = [0] : (tensor<1xf32>) -> tensor<1000xf32>
    %30 = stablehlo.maximum %29, %28 : tensor<1000xf32>
    return %30 : tensor<1000xf32>
  }
  func.func private @None(%arg0: tensor<i32>, %arg1: tensor<500xui32>, %arg2: tensor<500xui32>, %arg3: tensor<ui32>, %arg4: tensor<ui32>, %arg5: tensor<ui32>, %arg6: tensor<4xui32>, %arg7: tensor<4xui32>) -> (tensor<i32>, tensor<500xui32>, tensor<500xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>) {
    %c = stablehlo.constant dense<1> : tensor<i32>
    %0 = stablehlo.add %arg0, %c : tensor<i32>
    %1 = stablehlo.slice %arg6 [0:1] : (tensor<4xui32>) -> tensor<1xui32>
    %2 = stablehlo.reshape %1 : (tensor<1xui32>) -> tensor<ui32>
    %3 = stablehlo.add %arg1, %arg2 : tensor<500xui32>
    %4 = stablehlo.broadcast_in_dim %2, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %5 = stablehlo.shift_left %arg2, %4 : tensor<500xui32>
    %c_0 = stablehlo.constant dense<32> : tensor<ui32>
    %6 = stablehlo.subtract %c_0, %2 : tensor<ui32>
    %7 = stablehlo.broadcast_in_dim %6, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %8 = stablehlo.shift_right_logical %arg2, %7 : tensor<500xui32>
    %9 = stablehlo.or %5, %8 : tensor<500xui32>
    %10 = stablehlo.xor %3, %9 : tensor<500xui32>
    %11 = stablehlo.slice %arg6 [1:2] : (tensor<4xui32>) -> tensor<1xui32>
    %12 = stablehlo.reshape %11 : (tensor<1xui32>) -> tensor<ui32>
    %13 = stablehlo.add %3, %10 : tensor<500xui32>
    %14 = stablehlo.broadcast_in_dim %12, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %15 = stablehlo.shift_left %10, %14 : tensor<500xui32>
    %c_1 = stablehlo.constant dense<32> : tensor<ui32>
    %16 = stablehlo.subtract %c_1, %12 : tensor<ui32>
    %17 = stablehlo.broadcast_in_dim %16, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %18 = stablehlo.shift_right_logical %10, %17 : tensor<500xui32>
    %19 = stablehlo.or %15, %18 : tensor<500xui32>
    %20 = stablehlo.xor %13, %19 : tensor<500xui32>
    %21 = stablehlo.slice %arg6 [2:3] : (tensor<4xui32>) -> tensor<1xui32>
    %22 = stablehlo.reshape %21 : (tensor<1xui32>) -> tensor<ui32>
    %23 = stablehlo.add %13, %20 : tensor<500xui32>
    %24 = stablehlo.broadcast_in_dim %22, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %25 = stablehlo.shift_left %20, %24 : tensor<500xui32>
    %c_2 = stablehlo.constant dense<32> : tensor<ui32>
    %26 = stablehlo.subtract %c_2, %22 : tensor<ui32>
    %27 = stablehlo.broadcast_in_dim %26, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %28 = stablehlo.shift_right_logical %20, %27 : tensor<500xui32>
    %29 = stablehlo.or %25, %28 : tensor<500xui32>
    %30 = stablehlo.xor %23, %29 : tensor<500xui32>
    %31 = stablehlo.slice %arg6 [3:4] : (tensor<4xui32>) -> tensor<1xui32>
    %32 = stablehlo.reshape %31 : (tensor<1xui32>) -> tensor<ui32>
    %33 = stablehlo.add %23, %30 : tensor<500xui32>
    %34 = stablehlo.broadcast_in_dim %32, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %35 = stablehlo.shift_left %30, %34 : tensor<500xui32>
    %c_3 = stablehlo.constant dense<32> : tensor<ui32>
    %36 = stablehlo.subtract %c_3, %32 : tensor<ui32>
    %37 = stablehlo.broadcast_in_dim %36, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %38 = stablehlo.shift_right_logical %30, %37 : tensor<500xui32>
    %39 = stablehlo.or %35, %38 : tensor<500xui32>
    %40 = stablehlo.xor %33, %39 : tensor<500xui32>
    %41 = stablehlo.broadcast_in_dim %arg3, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %42 = stablehlo.add %33, %41 : tensor<500xui32>
    %43 = stablehlo.broadcast_in_dim %arg4, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %44 = stablehlo.add %40, %43 : tensor<500xui32>
    %c_4 = stablehlo.constant dense<1> : tensor<i32>
    %45 = stablehlo.add %arg0, %c_4 : tensor<i32>
    %46 = stablehlo.convert %45 : (tensor<i32>) -> tensor<ui32>
    %47 = stablehlo.broadcast_in_dim %46, dims = [] : (tensor<ui32>) -> tensor<500xui32>
    %48 = stablehlo.add %44, %47 : tensor<500xui32>
    return %0, %42, %48, %arg4, %arg5, %arg3, %arg7, %arg6 : tensor<i32>, tensor<500xui32>, tensor<500xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
  }
}
