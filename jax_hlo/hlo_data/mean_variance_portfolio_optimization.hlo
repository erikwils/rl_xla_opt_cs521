HloModule jit_mean_variance_opt, entry_computation_layout={(f32[3]{0}, f32[3,3]{1,0})->f32[3]{0}}

region_1.6 {
  Arg_0.7 = s32[] parameter(0)
  ROOT Arg_1.8 = s32[] parameter(1)
}

region_2.9 {
  Arg_0.10 = s32[] parameter(0)
  ROOT Arg_1.11 = s32[] parameter(1)
}

None.12 {
  Arg_0.13 = s32[] parameter(0)
  constant.18 = s32[] constant(1)
  add.19 = s32[] add(Arg_0.13, constant.18)
  Arg_1.14 = s32[3]{0} parameter(1)
  constant.17 = s32[] constant(0)
  compare.35 = pred[] compare(Arg_0.13, constant.17), direction=LT
  constant.16 = s32[] constant(3)
  add.36 = s32[] add(Arg_0.13, constant.16)
  select.37 = s32[] select(compare.35, add.36, Arg_0.13)
  reshape.38 = s32[1]{0} reshape(select.37)
  Arg_2.15 = s32[3]{0} parameter(2)
  compare.20 = pred[] compare(Arg_0.13, constant.17), direction=LT
  add.21 = s32[] add(Arg_0.13, constant.16)
  select.22 = s32[] select(compare.20, add.21, Arg_0.13)
  reshape.23 = s32[1]{0} reshape(select.22)
  gather.24 = s32[] gather(Arg_2.15, reshape.23), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  compare.30 = pred[] compare(gather.24, constant.17), direction=LT
  add.31 = s32[] add(gather.24, constant.16)
  select.32 = s32[] select(compare.30, add.31, gather.24)
  dynamic-slice.33 = s32[1]{0} dynamic-slice(Arg_1.14, select.32), dynamic_slice_sizes={1}
  reshape.34 = s32[] reshape(dynamic-slice.33)
  scatter.39 = s32[3]{0} scatter(Arg_1.14, reshape.38, reshape.34), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_1.6
  compare.40 = pred[] compare(gather.24, constant.17), direction=LT
  add.41 = s32[] add(gather.24, constant.16)
  select.42 = s32[] select(compare.40, add.41, gather.24)
  reshape.43 = s32[1]{0} reshape(select.42)
  compare.25 = pred[] compare(Arg_0.13, constant.17), direction=LT
  add.26 = s32[] add(Arg_0.13, constant.16)
  select.27 = s32[] select(compare.25, add.26, Arg_0.13)
  reshape.28 = s32[1]{0} reshape(select.27)
  gather.29 = s32[] gather(Arg_1.14, reshape.28), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  scatter.44 = s32[3]{0} scatter(scatter.39, reshape.43, gather.29), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_2.9
  ROOT tuple.45 = (s32[], s32[3]{0}, s32[3]{0}) tuple(add.19, scatter.44, Arg_2.15)
}

region_0.46 {
  arg_tuple.47 = (s32[], s32[], s32[3]{0}, s32[3]{0}) parameter(0)
  get-tuple-element.48 = s32[] get-tuple-element(arg_tuple.47), index=0
  constant.52 = s32[] constant(1)
  add.57 = s32[] add(get-tuple-element.48, constant.52)
  get-tuple-element.49 = s32[] get-tuple-element(arg_tuple.47), index=1
  get-tuple-element.50 = s32[3]{0} get-tuple-element(arg_tuple.47), index=2
  get-tuple-element.51 = s32[3]{0} get-tuple-element(arg_tuple.47), index=3
  call.53 = (s32[], s32[3]{0}, s32[3]{0}) call(get-tuple-element.49, get-tuple-element.50, get-tuple-element.51), to_apply=None.12
  get-tuple-element.54 = s32[] get-tuple-element(call.53), index=0
  get-tuple-element.55 = s32[3]{0} get-tuple-element(call.53), index=1
  get-tuple-element.56 = s32[3]{0} get-tuple-element(call.53), index=2
  ROOT tuple.58 = (s32[], s32[], s32[3]{0}, s32[3]{0}) tuple(add.57, get-tuple-element.54, get-tuple-element.55, get-tuple-element.56)
}

region_3.59 {
  arg_tuple.60 = (s32[], s32[], s32[3]{0}, s32[3]{0}) parameter(0)
  get-tuple-element.62 = s32[] get-tuple-element(arg_tuple.60), index=1
  get-tuple-element.63 = s32[3]{0} get-tuple-element(arg_tuple.60), index=2
  get-tuple-element.64 = s32[3]{0} get-tuple-element(arg_tuple.60), index=3
  get-tuple-element.61 = s32[] get-tuple-element(arg_tuple.60), index=0
  constant.65 = s32[] constant(3)
  ROOT compare.66 = pred[] compare(get-tuple-element.61, constant.65), direction=LT
}

_lu_solve.67 {
  constant.75 = s32[] constant(1)
  constant.78 = s32[] constant(0)
  constant.77 = s32[] constant(3)
  constant.76 = f32[] constant(1)
  Arg_0.68 = f32[3,3]{1,0} parameter(0)
  Arg_2.70 = f32[3,3]{1,0} parameter(2)
  reshape.79 = f32[3,3,1]{2,1,0} reshape(Arg_2.70)
  Arg_1.69 = s32[3]{0} parameter(1)
  constant.73 = s32[] constant(0)
  broadcast.74 = s32[3]{0} broadcast(constant.73), dimensions={}
  compare.80 = pred[3]{0} compare(Arg_1.69, broadcast.74), direction=LT
  constant.71 = s32[] constant(3)
  broadcast.72 = s32[3]{0} broadcast(constant.71), dimensions={}
  add.81 = s32[3]{0} add(Arg_1.69, broadcast.72)
  select.82 = s32[3]{0} select(compare.80, add.81, Arg_1.69)
  reshape.83 = s32[3,1]{1,0} reshape(select.82)
  gather.84 = f32[3,3,1]{2,1,0} gather(reshape.79, reshape.83), offset_dims={0,2}, collapsed_slice_dims={1}, start_index_map={1}, index_vector_dim=1, slice_sizes={3,1,1}
  transpose.85 = f32[3,1,3]{1,0,2} transpose(gather.84), dimensions={1,2,0}
  reshape.86 = f32[3,3]{1,0} reshape(transpose.85)
  custom-call.87 = f32[3,3]{0,1} custom-call(constant.75, constant.75, constant.78, constant.75, constant.77, constant.77, constant.75, constant.76, Arg_0.68, reshape.86), custom_call_target="blas_strsm", operand_layout_constraints={s32[], s32[], s32[], s32[], s32[], s32[], s32[], f32[], f32[3,3]{0,1}, f32[3,3]{0,1}}, output_to_operand_aliasing={{}: (9, {})}, api_version=API_VERSION_STATUS_RETURNING
  custom-call.88 = f32[3,3]{0,1} custom-call(constant.75, constant.78, constant.78, constant.78, constant.77, constant.77, constant.75, constant.76, Arg_0.68, custom-call.87), custom_call_target="blas_strsm", operand_layout_constraints={s32[], s32[], s32[], s32[], s32[], s32[], s32[], f32[], f32[3,3]{0,1}, f32[3,3]{0,1}}, output_to_operand_aliasing={{}: (9, {})}, api_version=API_VERSION_STATUS_RETURNING
  reshape.89 = f32[3,1,3]{2,1,0} reshape(custom-call.88)
  transpose.90 = f32[3,3,1]{0,2,1} transpose(reshape.89), dimensions={2,0,1}
  ROOT reshape.91 = f32[3,3]{1,0} reshape(transpose.90)
}

solve.92 {
  constant.99 = s32[] constant(0)
  iota.113 = s32[3]{0} iota(), iota_dimension=0
  constant.101 = s32[] constant(1)
  constant.100 = s32[] constant(3)
  Arg_0.93 = f32[3,3]{1,0} parameter(0)
  custom-call.102 = (f32[3,3]{0,1}, s32[3]{0}, s32[]) custom-call(constant.101, constant.100, constant.100, Arg_0.93), custom_call_target="lapack_sgetrf", operand_layout_constraints={s32[], s32[], s32[], f32[3,3]{0,1}}, output_to_operand_aliasing={{0}: (3, {})}, api_version=API_VERSION_STATUS_RETURNING
  get-tuple-element.104 = s32[3]{0} get-tuple-element(custom-call.102), index=1
  constant.97 = s32[] constant(1)
  broadcast.98 = s32[3]{0} broadcast(constant.97), dimensions={}
  subtract.106 = s32[3]{0} subtract(get-tuple-element.104, broadcast.98)
  tuple.114 = (s32[], s32[], s32[3]{0}, s32[3]{0}) tuple(constant.99, constant.99, iota.113, subtract.106)
  while.115 = (s32[], s32[], s32[3]{0}, s32[3]{0}) while(tuple.114), condition=region_3.59, body=region_0.46
  get-tuple-element.116 = s32[] get-tuple-element(while.115), index=0
  get-tuple-element.117 = s32[] get-tuple-element(while.115), index=1
  get-tuple-element.119 = s32[3]{0} get-tuple-element(while.115), index=3
  get-tuple-element.105 = s32[] get-tuple-element(custom-call.102), index=2
  compare.107 = pred[] compare(get-tuple-element.105, constant.99), direction=GE
  reshape.108 = pred[1,1]{1,0} reshape(compare.107)
  broadcast.109 = pred[1,1]{1,0} broadcast(reshape.108), dimensions={0,1}
  reshape.110 = pred[] reshape(broadcast.109)
  broadcast.111 = pred[3,3]{1,0} broadcast(reshape.110), dimensions={}
  get-tuple-element.103 = f32[3,3]{0,1} get-tuple-element(custom-call.102), index=0
  constant.95 = f32[] constant(nan)
  broadcast.96 = f32[3,3]{1,0} broadcast(constant.95), dimensions={}
  select.112 = f32[3,3]{1,0} select(broadcast.111, get-tuple-element.103, broadcast.96)
  get-tuple-element.118 = s32[3]{0} get-tuple-element(while.115), index=2
  Arg_1.94 = f32[3,3]{1,0} parameter(1)
  transpose.120 = f32[3,3]{0,1} transpose(Arg_1.94), dimensions={1,0}
  call.121 = f32[3,3]{1,0} call(select.112, get-tuple-element.118, transpose.120), to_apply=_lu_solve.67
  ROOT transpose.122 = f32[3,3]{0,1} transpose(call.121), dimensions={1,0}
}

inv.123 {
  Arg_0.124 = f32[3,3]{1,0} parameter(0)
  iota.125 = s32[3]{0} iota(), iota_dimension=0
  broadcast.126 = s32[3,3]{1,0} broadcast(iota.125), dimensions={0}
  iota.127 = s32[3]{0} iota(), iota_dimension=0
  broadcast.128 = s32[3,3]{1,0} broadcast(iota.127), dimensions={1}
  compare.129 = pred[3,3]{1,0} compare(broadcast.126, broadcast.128), direction=EQ
  convert.130 = f32[3,3]{1,0} convert(compare.129)
  ROOT call.131 = f32[3,3]{0,1} call(Arg_0.124, convert.130), to_apply=solve.92
}

region_4.134 {
  Arg_0.135 = f32[] parameter(0)
  Arg_1.136 = f32[] parameter(1)
  ROOT add.137 = f32[] add(Arg_0.135, Arg_1.136)
}

_where.147 {
  Arg_0.148 = pred[] parameter(0)
  broadcast.151 = pred[3]{0} broadcast(Arg_0.148), dimensions={}
  Arg_1.149 = f32[3]{0} parameter(1)
  Arg_2.150 = f32[3]{0} parameter(2)
  ROOT select.152 = f32[3]{0} select(broadcast.151, Arg_1.149, Arg_2.150)
}

ENTRY main.154 {
  Arg_1.2 = f32[3,3]{1,0} parameter(1)
  call.132 = f32[3,3]{0,1} call(Arg_1.2), to_apply=inv.123
  Arg_0.1 = f32[3]{0} parameter(0)
  dot.133 = f32[3]{0} dot(call.132, Arg_0.1), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  constant.5 = f32[] constant(0)
  reduce.138 = f32[] reduce(dot.133, constant.5), dimensions={0}, to_apply=region_4.134
  abs.139 = f32[] abs(reduce.138)
  constant.4 = f32[] constant(1e-09)
  compare.140 = pred[] compare(abs.139, constant.4), direction=LT
  sign.141 = f32[] sign(reduce.138)
  multiply.142 = f32[] multiply(sign.141, constant.4)
  add.143 = f32[] add(reduce.138, multiply.142)
  constant.3 = f32[] constant(1e-12)
  add.144 = f32[] add(add.143, constant.3)
  broadcast.145 = f32[3]{0} broadcast(add.144), dimensions={}
  divide.146 = f32[3]{0} divide(dot.133, broadcast.145)
  ROOT call.153 = f32[3]{0} call(compare.140, dot.133, divide.146), to_apply=_where.147
}

