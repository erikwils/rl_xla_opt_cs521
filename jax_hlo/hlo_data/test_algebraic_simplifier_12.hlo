HloModule test_algebraic_simplifier_12, entry_computation_layout={()->(f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, /*index=5*/f32[16]{0}, f32[16]{0})}

ENTRY %main () -> (f32[16], f32[16], f32[16], f32[16], f32[16], /*index=5*/f32[16], f32[16]) {
  %constant_neg_one = f32[] constant(-1)
  %neg_one_array = f32[16]{0} broadcast(%constant_neg_one), dimensions={}
  %constant_two = f32[] constant(2)
  %two_array = f32[16]{0} broadcast(%constant_two), dimensions={}
  %constant_one = f32[] constant(1)
  %one_array = f32[16]{0} broadcast(%constant_one), dimensions={}
  %multiply.anon = f32[16]{0} multiply(%two_array, %one_array)
  %constant_zero = f32[] constant(0)
  %zero_array = f32[16]{0} broadcast(%constant_zero), dimensions={}
  %complex_add_mul_12_0 = f32[16]{0} add(%multiply.anon, %zero_array)
  %constant_half = f32[] constant(0.5)
  %half_array = f32[16]{0} broadcast(%constant_half), dimensions={}
  %power_one_12_1 = f32[16]{0} power(%half_array, %one_array)
  %power_zero_12_2 = f32[16]{0} power(%two_array, %zero_array)
  %constant_pi = f32[] constant(3.14159)
  %pi_array = f32[16]{0} broadcast(%constant_pi), dimensions={}
  %sub_zero_12_3 = f32[16]{0} subtract(%pi_array, %zero_array)
  %multiply.anon.1 = f32[16]{0} multiply(%two_array, %one_array)
  %complex_pow_mul_12_4 = f32[16]{0} power(%multiply.anon.1, %one_array)
  %constant_e = f32[] constant(2.71828)
  %e_array = f32[16]{0} broadcast(%constant_e), dimensions={}
  %add.anon = f32[16]{0} add(%e_array, %one_array)
  %complex_sub_add_12_5 = f32[16]{0} subtract(%add.anon, %one_array)
  %sqrt.anon = f32[16]{0} sqrt(%two_array)
  %square_sqrt_12_6 = f32[16]{0} power(%sqrt.anon, %two_array)
  ROOT %result = (f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, /*index=5*/f32[16]{0}, f32[16]{0}) tuple(%complex_add_mul_12_0, %power_one_12_1, %power_zero_12_2, %sub_zero_12_3, %complex_pow_mul_12_4, /*index=5*/%complex_sub_add_12_5, %square_sqrt_12_6)
}



