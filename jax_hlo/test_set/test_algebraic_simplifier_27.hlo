HloModule test_algebraic_simplifier_27, entry_computation_layout={()->(f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, /*index=5*/f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0})}

ENTRY %main () -> (f32[16], f32[16], f32[16], f32[16], f32[16], /*index=5*/f32[16], f32[16], f32[16], f32[16]) {
  %constant_zero = f32[] constant(0)
  %zero_array = f32[16]{0} broadcast(%constant_zero), dimensions={}
  %add_zero_27_0 = f32[16]{0} add(%zero_array, %zero_array)
  %sqrt.anon = f32[16]{0} sqrt(%zero_array)
  %constant_two = f32[] constant(2)
  %two_array = f32[16]{0} broadcast(%constant_two), dimensions={}
  %square_sqrt_27_1 = f32[16]{0} power(%sqrt.anon, %two_array)
  %mul_two_27_2 = f32[16]{0} multiply(%two_array, %two_array)
  %constant_e = f32[] constant(2.71828)
  %e_array = f32[16]{0} broadcast(%constant_e), dimensions={}
  %add.anon = f32[16]{0} add(%e_array, %zero_array)
  %constant_one = f32[] constant(1)
  %one_array = f32[16]{0} broadcast(%constant_one), dimensions={}
  %complex_mul_add_27_3 = f32[16]{0} multiply(%add.anon, %one_array)
  %power_zero_27_4 = f32[16]{0} power(%e_array, %zero_array)
  %sub_self_27_5 = f32[16]{0} subtract(%zero_array, %zero_array)
  %sub_zero_27_6 = f32[16]{0} subtract(%one_array, %zero_array)
  %multiply.anon = f32[16]{0} multiply(%one_array, %one_array)
  %complex_add_mul_27_7 = f32[16]{0} add(%multiply.anon, %zero_array)
  %complex_combo_27_combo_0 = f32[16]{0} subtract(%complex_add_mul_27_7, %complex_mul_add_27_3)
  ROOT %result = (f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}, /*index=5*/f32[16]{0}, f32[16]{0}, f32[16]{0}, f32[16]{0}) tuple(%add_zero_27_0, %square_sqrt_27_1, %mul_two_27_2, %complex_mul_add_27_3, %power_zero_27_4, /*index=5*/%sub_self_27_5, %sub_zero_27_6, %complex_add_mul_27_7, %complex_combo_27_combo_0)
}



