module @jit_black_scholes_call attributes {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<f32> {mhlo.layout_mode = "default"}, %arg1: tensor<f32> {mhlo.layout_mode = "default"}, %arg2: tensor<f32> {mhlo.layout_mode = "default"}, %arg3: tensor<f32> {mhlo.layout_mode = "default"}, %arg4: tensor<f32> {mhlo.layout_mode = "default"}) -> (tensor<f32> {jax.result_info = "", mhlo.layout_mode = "default"}) {
    %0 = stablehlo.divide %arg0, %arg1 : tensor<f32>
    %1 = stablehlo.log %0 : tensor<f32>
    %2 = stablehlo.multiply %arg4, %arg4 : tensor<f32>
    %cst = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %3 = stablehlo.multiply %cst, %2 : tensor<f32>
    %4 = stablehlo.add %arg3, %3 : tensor<f32>
    %5 = stablehlo.multiply %4, %arg2 : tensor<f32>
    %6 = stablehlo.add %1, %5 : tensor<f32>
    %7 = stablehlo.sqrt %arg2 : tensor<f32>
    %8 = stablehlo.multiply %arg4, %7 : tensor<f32>
    %9 = stablehlo.divide %6, %8 : tensor<f32>
    %10 = stablehlo.sqrt %arg2 : tensor<f32>
    %11 = stablehlo.multiply %arg4, %10 : tensor<f32>
    %12 = stablehlo.subtract %9, %11 : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %13 = stablehlo.subtract %9, %cst_0 : tensor<f32>
    %cst_1 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %14 = stablehlo.divide %13, %cst_1 : tensor<f32>
    %15 = stablehlo.convert %14 : tensor<f32>
    %cst_2 = stablehlo.constant dense<0.707106769> : tensor<f32>
    %16 = stablehlo.multiply %15, %cst_2 : tensor<f32>
    %17 = stablehlo.abs %16 : tensor<f32>
    %cst_3 = stablehlo.constant dense<0.707106769> : tensor<f32>
    %18 = stablehlo.compare  LT, %17, %cst_3,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1>
    %19 = chlo.erf %16 : tensor<f32> -> tensor<f32>
    %cst_4 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %20 = stablehlo.add %cst_4, %19 : tensor<f32>
    %cst_5 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %21 = stablehlo.compare  GT, %16, %cst_5,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1>
    %22 = chlo.erfc %17 : tensor<f32> -> tensor<f32>
    %cst_6 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %23 = stablehlo.subtract %cst_6, %22 : tensor<f32>
    %24 = chlo.erfc %17 : tensor<f32> -> tensor<f32>
    %25 = stablehlo.select %21, %23, %24 : tensor<i1>, tensor<f32>
    %26 = stablehlo.select %18, %20, %25 : tensor<i1>, tensor<f32>
    %cst_7 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %27 = stablehlo.multiply %cst_7, %26 : tensor<f32>
    %28 = stablehlo.convert %arg0 : tensor<f32>
    %29 = stablehlo.multiply %28, %27 : tensor<f32>
    %30 = stablehlo.negate %arg3 : tensor<f32>
    %31 = stablehlo.multiply %30, %arg2 : tensor<f32>
    %32 = stablehlo.exponential %31 : tensor<f32>
    %33 = stablehlo.multiply %arg1, %32 : tensor<f32>
    %cst_8 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %34 = stablehlo.subtract %12, %cst_8 : tensor<f32>
    %cst_9 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %35 = stablehlo.divide %34, %cst_9 : tensor<f32>
    %36 = stablehlo.convert %35 : tensor<f32>
    %cst_10 = stablehlo.constant dense<0.707106769> : tensor<f32>
    %37 = stablehlo.multiply %36, %cst_10 : tensor<f32>
    %38 = stablehlo.abs %37 : tensor<f32>
    %cst_11 = stablehlo.constant dense<0.707106769> : tensor<f32>
    %39 = stablehlo.compare  LT, %38, %cst_11,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1>
    %40 = chlo.erf %37 : tensor<f32> -> tensor<f32>
    %cst_12 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %41 = stablehlo.add %cst_12, %40 : tensor<f32>
    %cst_13 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %42 = stablehlo.compare  GT, %37, %cst_13,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1>
    %43 = chlo.erfc %38 : tensor<f32> -> tensor<f32>
    %cst_14 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %44 = stablehlo.subtract %cst_14, %43 : tensor<f32>
    %45 = chlo.erfc %38 : tensor<f32> -> tensor<f32>
    %46 = stablehlo.select %42, %44, %45 : tensor<i1>, tensor<f32>
    %47 = stablehlo.select %39, %41, %46 : tensor<i1>, tensor<f32>
    %cst_15 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %48 = stablehlo.multiply %cst_15, %47 : tensor<f32>
    %49 = stablehlo.convert %33 : tensor<f32>
    %50 = stablehlo.multiply %49, %48 : tensor<f32>
    %51 = stablehlo.subtract %29, %50 : tensor<f32>
    return %51 : tensor<f32>
  }
}
