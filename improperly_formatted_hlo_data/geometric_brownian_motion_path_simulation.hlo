HloModule jit_simulate_gbm_for_hlo, entry_computation_layout={(f32[], f32[], f32[], f32[], f32[], /*index=5*/u32[2]{0})->f32[101]{0}}

_linspace.10 {
  Arg_0.11 = s32[] parameter(0)
  convert.17 = f32[] convert(Arg_0.11)
  reshape.20 = f32[1]{0} reshape(convert.17)
  broadcast.22 = f32[1]{0} broadcast(reshape.20), dimensions={0}
  reshape.23 = f32[] reshape(broadcast.22)
  broadcast.24 = f32[100]{0} broadcast(reshape.23), dimensions={}
  constant.13 = f32[] constant(1)
  broadcast.14 = f32[100]{0} broadcast(constant.13), dimensions={}
  iota.18 = f32[100]{0} iota(), iota_dimension=0
  constant.15 = f32[] constant(100)
  broadcast.16 = f32[100]{0} broadcast(constant.15), dimensions={}
  divide.19 = f32[100]{0} divide(iota.18, broadcast.16)
  subtract.21 = f32[100]{0} subtract(broadcast.14, divide.19)
  multiply.25 = f32[100]{0} multiply(broadcast.24, subtract.21)
  Arg_1.12 = f32[] parameter(1)
  reshape.26 = f32[1]{0} reshape(Arg_1.12)
  broadcast.27 = f32[1]{0} broadcast(reshape.26), dimensions={0}
  reshape.28 = f32[] reshape(broadcast.27)
  broadcast.29 = f32[100]{0} broadcast(reshape.28), dimensions={}
  multiply.30 = f32[100]{0} multiply(broadcast.29, divide.19)
  add.31 = f32[100]{0} add(multiply.25, multiply.30)
  reshape.32 = f32[1]{0} reshape(Arg_1.12)
  ROOT concatenate.33 = f32[101]{0} concatenate(add.31, reshape.32), dimensions={0}
}

None.35 {
  Arg_0.36 = s32[] parameter(0)
  constant.45 = s32[] constant(1)
  add.46 = s32[] add(Arg_0.36, constant.45)
  Arg_1.37 = u32[50]{0} parameter(1)
  Arg_2.38 = u32[50]{0} parameter(2)
  add.49 = u32[50]{0} add(Arg_1.37, Arg_2.38)
  Arg_6.42 = u32[4]{0} parameter(6)
  slice.47 = u32[1]{0} slice(Arg_6.42), slice={[0:1]}
  reshape.48 = u32[] reshape(slice.47)
  broadcast.50 = u32[50]{0} broadcast(reshape.48), dimensions={}
  shift-left.51 = u32[50]{0} shift-left(Arg_2.38, broadcast.50)
  constant.44 = u32[] constant(32)
  subtract.52 = u32[] subtract(constant.44, reshape.48)
  broadcast.53 = u32[50]{0} broadcast(subtract.52), dimensions={}
  shift-right-logical.54 = u32[50]{0} shift-right-logical(Arg_2.38, broadcast.53)
  or.55 = u32[50]{0} or(shift-left.51, shift-right-logical.54)
  xor.56 = u32[50]{0} xor(add.49, or.55)
  add.59 = u32[50]{0} add(add.49, xor.56)
  slice.57 = u32[1]{0} slice(Arg_6.42), slice={[1:2]}
  reshape.58 = u32[] reshape(slice.57)
  broadcast.60 = u32[50]{0} broadcast(reshape.58), dimensions={}
  shift-left.61 = u32[50]{0} shift-left(xor.56, broadcast.60)
  subtract.62 = u32[] subtract(constant.44, reshape.58)
  broadcast.63 = u32[50]{0} broadcast(subtract.62), dimensions={}
  shift-right-logical.64 = u32[50]{0} shift-right-logical(xor.56, broadcast.63)
  or.65 = u32[50]{0} or(shift-left.61, shift-right-logical.64)
  xor.66 = u32[50]{0} xor(add.59, or.65)
  add.69 = u32[50]{0} add(add.59, xor.66)
  slice.67 = u32[1]{0} slice(Arg_6.42), slice={[2:3]}
  reshape.68 = u32[] reshape(slice.67)
  broadcast.70 = u32[50]{0} broadcast(reshape.68), dimensions={}
  shift-left.71 = u32[50]{0} shift-left(xor.66, broadcast.70)
  subtract.72 = u32[] subtract(constant.44, reshape.68)
  broadcast.73 = u32[50]{0} broadcast(subtract.72), dimensions={}
  shift-right-logical.74 = u32[50]{0} shift-right-logical(xor.66, broadcast.73)
  or.75 = u32[50]{0} or(shift-left.71, shift-right-logical.74)
  xor.76 = u32[50]{0} xor(add.69, or.75)
  add.79 = u32[50]{0} add(add.69, xor.76)
  Arg_3.39 = u32[] parameter(3)
  broadcast.87 = u32[50]{0} broadcast(Arg_3.39), dimensions={}
  add.88 = u32[50]{0} add(add.79, broadcast.87)
  slice.77 = u32[1]{0} slice(Arg_6.42), slice={[3:4]}
  reshape.78 = u32[] reshape(slice.77)
  broadcast.80 = u32[50]{0} broadcast(reshape.78), dimensions={}
  shift-left.81 = u32[50]{0} shift-left(xor.76, broadcast.80)
  subtract.82 = u32[] subtract(constant.44, reshape.78)
  broadcast.83 = u32[50]{0} broadcast(subtract.82), dimensions={}
  shift-right-logical.84 = u32[50]{0} shift-right-logical(xor.76, broadcast.83)
  or.85 = u32[50]{0} or(shift-left.81, shift-right-logical.84)
  xor.86 = u32[50]{0} xor(add.79, or.85)
  Arg_4.40 = u32[] parameter(4)
  broadcast.89 = u32[50]{0} broadcast(Arg_4.40), dimensions={}
  add.90 = u32[50]{0} add(xor.86, broadcast.89)
  add.91 = s32[] add(Arg_0.36, constant.45)
  convert.92 = u32[] convert(add.91)
  broadcast.93 = u32[50]{0} broadcast(convert.92), dimensions={}
  add.94 = u32[50]{0} add(add.90, broadcast.93)
  Arg_5.41 = u32[] parameter(5)
  Arg_7.43 = u32[4]{0} parameter(7)
  ROOT tuple.95 = (s32[], u32[50]{0}, u32[50]{0}, u32[], u32[], /*index=5*/u32[], u32[4]{0}, u32[4]{0}) tuple(add.46, add.88, add.94, Arg_4.40, Arg_5.41, Arg_3.39, Arg_7.43, Arg_6.42)
}

region_0.96 {
  arg_tuple.97 = (s32[], s32[], u32[50]{0}, u32[50]{0}, u32[], /*index=5*/u32[], u32[], u32[4]{0}, u32[4]{0}) parameter(0)
  get-tuple-element.98 = s32[] get-tuple-element(arg_tuple.97), index=0
  constant.107 = s32[] constant(1)
  add.117 = s32[] add(get-tuple-element.98, constant.107)
  get-tuple-element.99 = s32[] get-tuple-element(arg_tuple.97), index=1
  get-tuple-element.100 = u32[50]{0} get-tuple-element(arg_tuple.97), index=2
  get-tuple-element.101 = u32[50]{0} get-tuple-element(arg_tuple.97), index=3
  get-tuple-element.102 = u32[] get-tuple-element(arg_tuple.97), index=4
  get-tuple-element.103 = u32[] get-tuple-element(arg_tuple.97), index=5
  get-tuple-element.104 = u32[] get-tuple-element(arg_tuple.97), index=6
  get-tuple-element.105 = u32[4]{0} get-tuple-element(arg_tuple.97), index=7
  get-tuple-element.106 = u32[4]{0} get-tuple-element(arg_tuple.97), index=8
  call.108 = (s32[], u32[50]{0}, u32[50]{0}, u32[], u32[], /*index=5*/u32[], u32[4]{0}, u32[4]{0}) call(get-tuple-element.99, get-tuple-element.100, get-tuple-element.101, get-tuple-element.102, get-tuple-element.103, get-tuple-element.104, get-tuple-element.105, get-tuple-element.106), to_apply=None.35
  get-tuple-element.109 = s32[] get-tuple-element(call.108), index=0
  get-tuple-element.110 = u32[50]{0} get-tuple-element(call.108), index=1
  get-tuple-element.111 = u32[50]{0} get-tuple-element(call.108), index=2
  get-tuple-element.112 = u32[] get-tuple-element(call.108), index=3
  get-tuple-element.113 = u32[] get-tuple-element(call.108), index=4
  get-tuple-element.114 = u32[] get-tuple-element(call.108), index=5
  get-tuple-element.115 = u32[4]{0} get-tuple-element(call.108), index=6
  get-tuple-element.116 = u32[4]{0} get-tuple-element(call.108), index=7
  ROOT tuple.118 = (s32[], s32[], u32[50]{0}, u32[50]{0}, u32[], /*index=5*/u32[], u32[], u32[4]{0}, u32[4]{0}) tuple(add.117, get-tuple-element.109, get-tuple-element.110, get-tuple-element.111, get-tuple-element.112, get-tuple-element.113, get-tuple-element.114, get-tuple-element.115, get-tuple-element.116)
}

region_1.119 {
  arg_tuple.120 = (s32[], s32[], u32[50]{0}, u32[50]{0}, u32[], /*index=5*/u32[], u32[], u32[4]{0}, u32[4]{0}) parameter(0)
  get-tuple-element.122 = s32[] get-tuple-element(arg_tuple.120), index=1
  get-tuple-element.123 = u32[50]{0} get-tuple-element(arg_tuple.120), index=2
  get-tuple-element.124 = u32[50]{0} get-tuple-element(arg_tuple.120), index=3
  get-tuple-element.125 = u32[] get-tuple-element(arg_tuple.120), index=4
  get-tuple-element.126 = u32[] get-tuple-element(arg_tuple.120), index=5
  get-tuple-element.127 = u32[] get-tuple-element(arg_tuple.120), index=6
  get-tuple-element.128 = u32[4]{0} get-tuple-element(arg_tuple.120), index=7
  get-tuple-element.129 = u32[4]{0} get-tuple-element(arg_tuple.120), index=8
  get-tuple-element.121 = s32[] get-tuple-element(arg_tuple.120), index=0
  constant.130 = s32[] constant(5)
  ROOT compare.131 = pred[] compare(get-tuple-element.121, constant.130), direction=LT
}

_uniform.132 {
  constant.142 = s32[] constant(0)
  iota.148 = u32[100]{0} iota(), iota_dimension=0
  slice.153 = u32[50]{0} slice(iota.148), slice={[0:50]}
  Arg_0.133 = u32[2]{0} parameter(0)
  slice.149 = u32[1]{0} slice(Arg_0.133), slice={[0:1]}
  reshape.150 = u32[] reshape(slice.149)
  broadcast.157 = u32[50]{0} broadcast(reshape.150), dimensions={}
  add.158 = u32[50]{0} add(slice.153, broadcast.157)
  slice.154 = u32[50]{0} slice(iota.148), slice={[50:100]}
  slice.151 = u32[1]{0} slice(Arg_0.133), slice={[1:2]}
  reshape.152 = u32[] reshape(slice.151)
  broadcast.159 = u32[50]{0} broadcast(reshape.152), dimensions={}
  add.160 = u32[50]{0} add(slice.154, broadcast.159)
  xor.155 = u32[] xor(reshape.150, reshape.152)
  constant.143 = u32[] constant(466688986)
  xor.156 = u32[] xor(xor.155, constant.143)
  constant.145 = u32[4]{0} constant({13, 15, 26, 6})
  constant.144 = u32[4]{0} constant({17, 29, 16, 24})
  tuple.161 = (s32[], s32[], u32[50]{0}, u32[50]{0}, u32[], /*index=5*/u32[], u32[], u32[4]{0}, u32[4]{0}) tuple(constant.142, constant.142, add.158, add.160, reshape.152, xor.156, reshape.150, constant.145, constant.144)
  while.162 = (s32[], s32[], u32[50]{0}, u32[50]{0}, u32[], /*index=5*/u32[], u32[], u32[4]{0}, u32[4]{0}) while(tuple.161), condition=region_1.119, body=region_0.96
  get-tuple-element.163 = s32[] get-tuple-element(while.162), index=0
  get-tuple-element.164 = s32[] get-tuple-element(while.162), index=1
  get-tuple-element.167 = u32[] get-tuple-element(while.162), index=4
  get-tuple-element.168 = u32[] get-tuple-element(while.162), index=5
  get-tuple-element.169 = u32[] get-tuple-element(while.162), index=6
  get-tuple-element.170 = u32[4]{0} get-tuple-element(while.162), index=7
  get-tuple-element.171 = u32[4]{0} get-tuple-element(while.162), index=8
  Arg_1.134 = f32[] parameter(1)
  reshape.146 = f32[1]{0} reshape(Arg_1.134)
  broadcast.186 = f32[1]{0} broadcast(reshape.146), dimensions={0}
  reshape.187 = f32[] reshape(broadcast.186)
  broadcast.188 = f32[100]{0} broadcast(reshape.187), dimensions={}
  get-tuple-element.165 = u32[50]{0} get-tuple-element(while.162), index=2
  get-tuple-element.166 = u32[50]{0} get-tuple-element(while.162), index=3
  concatenate.172 = u32[100]{0} concatenate(get-tuple-element.165, get-tuple-element.166), dimensions={0}
  constant.140 = u32[] constant(9)
  broadcast.141 = u32[100]{0} broadcast(constant.140), dimensions={}
  shift-right-logical.173 = u32[100]{0} shift-right-logical(concatenate.172, broadcast.141)
  constant.138 = u32[] constant(1065353216)
  broadcast.139 = u32[100]{0} broadcast(constant.138), dimensions={}
  or.174 = u32[100]{0} or(shift-right-logical.173, broadcast.139)
  bitcast-convert.175 = f32[100]{0} bitcast-convert(or.174)
  constant.136 = f32[] constant(1)
  broadcast.137 = f32[100]{0} broadcast(constant.136), dimensions={}
  subtract.176 = f32[100]{0} subtract(bitcast-convert.175, broadcast.137)
  Arg_2.135 = f32[] parameter(2)
  reshape.147 = f32[1]{0} reshape(Arg_2.135)
  subtract.177 = f32[1]{0} subtract(reshape.147, reshape.146)
  broadcast.178 = f32[1]{0} broadcast(subtract.177), dimensions={0}
  reshape.179 = f32[] reshape(broadcast.178)
  broadcast.180 = f32[100]{0} broadcast(reshape.179), dimensions={}
  multiply.181 = f32[100]{0} multiply(subtract.176, broadcast.180)
  broadcast.182 = f32[1]{0} broadcast(reshape.146), dimensions={0}
  reshape.183 = f32[] reshape(broadcast.182)
  broadcast.184 = f32[100]{0} broadcast(reshape.183), dimensions={}
  add.185 = f32[100]{0} add(multiply.181, broadcast.184)
  ROOT maximum.189 = f32[100]{0} maximum(broadcast.188, add.185)
}

_normal_real.190 {
  Arg_0.191 = u32[2]{0} parameter(0)
  constant.240 = f32[] constant(-0.99999994)
  constant.241 = f32[] constant(1)
  call.242 = f32[100]{0} call(Arg_0.191, constant.240, constant.241), to_apply=_uniform.132
  abs.278 = f32[100]{0} abs(call.242)
  constant.196 = f32[] constant(1)
  broadcast.197 = f32[100]{0} broadcast(constant.196), dimensions={}
  compare.279 = pred[100]{0} compare(abs.278, broadcast.197), direction=EQ
  constant.194 = f32[] constant(inf)
  broadcast.195 = f32[100]{0} broadcast(constant.194), dimensions={}
  multiply.280 = f32[100]{0} multiply(call.242, broadcast.195)
  negate.243 = f32[100]{0} negate(call.242)
  multiply.244 = f32[100]{0} multiply(call.242, negate.243)
  log-plus-one.245 = f32[100]{0} log-plus-one(multiply.244)
  negate.246 = f32[100]{0} negate(log-plus-one.245)
  constant.238 = f32[] constant(5)
  broadcast.239 = f32[100]{0} broadcast(constant.238), dimensions={}
  compare.247 = pred[100]{0} compare(negate.246, broadcast.239), direction=LT
  constant.200 = f32[] constant(1.50140941)
  broadcast.201 = f32[100]{0} broadcast(constant.200), dimensions={}
  constant.198 = f32[] constant(2.83297682)
  broadcast.199 = f32[100]{0} broadcast(constant.198), dimensions={}
  select.274 = f32[100]{0} select(compare.247, broadcast.201, broadcast.199)
  constant.204 = f32[] constant(0.246640727)
  broadcast.205 = f32[100]{0} broadcast(constant.204), dimensions={}
  constant.202 = f32[] constant(1.00167406)
  broadcast.203 = f32[100]{0} broadcast(constant.202), dimensions={}
  select.271 = f32[100]{0} select(compare.247, broadcast.205, broadcast.203)
  constant.208 = f32[] constant(-0.00417768164)
  broadcast.209 = f32[100]{0} broadcast(constant.208), dimensions={}
  constant.206 = f32[] constant(0.00943887047)
  broadcast.207 = f32[100]{0} broadcast(constant.206), dimensions={}
  select.268 = f32[100]{0} select(compare.247, broadcast.209, broadcast.207)
  constant.212 = f32[] constant(-0.00125372503)
  broadcast.213 = f32[100]{0} broadcast(constant.212), dimensions={}
  constant.210 = f32[] constant(-0.0076224613)
  broadcast.211 = f32[100]{0} broadcast(constant.210), dimensions={}
  select.265 = f32[100]{0} select(compare.247, broadcast.213, broadcast.211)
  constant.216 = f32[] constant(0.00021858087)
  broadcast.217 = f32[100]{0} broadcast(constant.216), dimensions={}
  constant.214 = f32[] constant(0.00573950773)
  broadcast.215 = f32[100]{0} broadcast(constant.214), dimensions={}
  select.262 = f32[100]{0} select(compare.247, broadcast.217, broadcast.215)
  constant.220 = f32[] constant(-4.39150654e-06)
  broadcast.221 = f32[100]{0} broadcast(constant.220), dimensions={}
  constant.218 = f32[] constant(-0.00367342844)
  broadcast.219 = f32[100]{0} broadcast(constant.218), dimensions={}
  select.259 = f32[100]{0} select(compare.247, broadcast.221, broadcast.219)
  constant.224 = f32[] constant(-3.5233877e-06)
  broadcast.225 = f32[100]{0} broadcast(constant.224), dimensions={}
  constant.222 = f32[] constant(0.00134934322)
  broadcast.223 = f32[100]{0} broadcast(constant.222), dimensions={}
  select.256 = f32[100]{0} select(compare.247, broadcast.225, broadcast.223)
  constant.228 = f32[] constant(3.43273939e-07)
  broadcast.229 = f32[100]{0} broadcast(constant.228), dimensions={}
  constant.226 = f32[] constant(0.000100950558)
  broadcast.227 = f32[100]{0} broadcast(constant.226), dimensions={}
  select.253 = f32[100]{0} select(compare.247, broadcast.229, broadcast.227)
  constant.232 = f32[] constant(2.81022636e-08)
  broadcast.233 = f32[100]{0} broadcast(constant.232), dimensions={}
  constant.230 = f32[] constant(-0.000200214257)
  broadcast.231 = f32[100]{0} broadcast(constant.230), dimensions={}
  select.252 = f32[100]{0} select(compare.247, broadcast.233, broadcast.231)
  constant.236 = f32[] constant(2.5)
  broadcast.237 = f32[100]{0} broadcast(constant.236), dimensions={}
  subtract.248 = f32[100]{0} subtract(negate.246, broadcast.237)
  sqrt.249 = f32[100]{0} sqrt(negate.246)
  constant.234 = f32[] constant(3)
  broadcast.235 = f32[100]{0} broadcast(constant.234), dimensions={}
  subtract.250 = f32[100]{0} subtract(sqrt.249, broadcast.235)
  select.251 = f32[100]{0} select(compare.247, subtract.248, subtract.250)
  multiply.254 = f32[100]{0} multiply(select.252, select.251)
  add.255 = f32[100]{0} add(select.253, multiply.254)
  multiply.257 = f32[100]{0} multiply(add.255, select.251)
  add.258 = f32[100]{0} add(select.256, multiply.257)
  multiply.260 = f32[100]{0} multiply(add.258, select.251)
  add.261 = f32[100]{0} add(select.259, multiply.260)
  multiply.263 = f32[100]{0} multiply(add.261, select.251)
  add.264 = f32[100]{0} add(select.262, multiply.263)
  multiply.266 = f32[100]{0} multiply(add.264, select.251)
  add.267 = f32[100]{0} add(select.265, multiply.266)
  multiply.269 = f32[100]{0} multiply(add.267, select.251)
  add.270 = f32[100]{0} add(select.268, multiply.269)
  multiply.272 = f32[100]{0} multiply(add.270, select.251)
  add.273 = f32[100]{0} add(select.271, multiply.272)
  multiply.275 = f32[100]{0} multiply(add.273, select.251)
  add.276 = f32[100]{0} add(select.274, multiply.275)
  multiply.277 = f32[100]{0} multiply(add.276, call.242)
  select.281 = f32[100]{0} select(compare.279, multiply.280, multiply.277)
  constant.192 = f32[] constant(1.41421354)
  broadcast.193 = f32[100]{0} broadcast(constant.192), dimensions={}
  ROOT multiply.282 = f32[100]{0} multiply(select.281, broadcast.193)
}

_normal.283 {
  Arg_0.284 = u32[2]{0} parameter(0)
  ROOT call.285 = f32[100]{0} call(Arg_0.284), to_apply=_normal_real.190
}

region_2.290 {
  Arg_0.291 = f32[] parameter(0)
  Arg_1.292 = f32[] parameter(1)
  ROOT add.293 = f32[] add(Arg_0.291, Arg_1.292)
}

cumsum_0.294 {
  Arg_0.295 = f32[100]{0} parameter(0)
  constant.296 = f32[] constant(0)
  ROOT reduce-window.297 = f32[100]{0} reduce-window(Arg_0.295, constant.296), window={size=100 pad=99_0}, to_apply=region_2.290
}

cumsum.298 {
  Arg_0.299 = f32[100]{0} parameter(0)
  ROOT call.300 = f32[100]{0} call(Arg_0.299), to_apply=cumsum_0.294
}

ENTRY main.314 {
  Arg_0.1 = f32[] parameter(0)
  broadcast.312 = f32[101]{0} broadcast(Arg_0.1), dimensions={}
  Arg_1.2 = f32[] parameter(1)
  Arg_2.3 = f32[] parameter(2)
  multiply.303 = f32[] multiply(Arg_2.3, Arg_2.3)
  constant.7 = f32[] constant(0.5)
  multiply.304 = f32[] multiply(multiply.303, constant.7)
  subtract.305 = f32[] subtract(Arg_1.2, multiply.304)
  broadcast.306 = f32[101]{0} broadcast(subtract.305), dimensions={}
  constant.9 = s32[] constant(0)
  Arg_3.4 = f32[] parameter(3)
  call.34 = f32[101]{0} call(constant.9, Arg_3.4), to_apply=_linspace.10
  multiply.307 = f32[101]{0} multiply(broadcast.306, call.34)
  broadcast.308 = f32[101]{0} broadcast(Arg_2.3), dimensions={}
  constant.8 = f32[1]{0} constant({0})
  Arg_5.6 = u32[2]{0} parameter(5)
  call.286 = f32[100]{0} call(Arg_5.6), to_apply=_normal.283
  Arg_4.5 = f32[] parameter(4)
  sqrt.287 = f32[] sqrt(Arg_4.5)
  broadcast.288 = f32[100]{0} broadcast(sqrt.287), dimensions={}
  multiply.289 = f32[100]{0} multiply(call.286, broadcast.288)
  call.301 = f32[100]{0} call(multiply.289), to_apply=cumsum.298
  concatenate.302 = f32[101]{0} concatenate(constant.8, call.301), dimensions={0}
  multiply.309 = f32[101]{0} multiply(broadcast.308, concatenate.302)
  add.310 = f32[101]{0} add(multiply.307, multiply.309)
  exponential.311 = f32[101]{0} exponential(add.310)
  ROOT multiply.313 = f32[101]{0} multiply(broadcast.312, exponential.311)
}

