HloModule test_algebraic_simplifier_8
ENTRY main {
  constant_zero = f32[] constant(0)
  constant_two = f32[] constant(2)
  constant_half = f32[] constant(0.5)
  constant_one = f32[] constant(1)
  constant_pi = f32[] constant(3.14159)
  zero_array = f32[8,8] broadcast(constant_zero), dimensions={}
  one_array = f32[8,8] broadcast(constant_one), dimensions={}
  two_array = f32[8,8] broadcast(constant_two), dimensions={}
  half_array = f32[8,8] broadcast(constant_half), dimensions={}
  pi_array = f32[8,8] broadcast(constant_pi), dimensions={}
  sub_zero_8_0 = f32[8,8] subtract(one_array, zero_array)
  complex_add_mul_8_1 = f32[8,8] add(multiply(two_array, one_array), zero_array)
  mul_zero_8_2 = f32[8,8] multiply(zero_array, zero_array)
  square_sqrt_8_3 = f32[8,8] power(sqrt(zero_array), two_array)
  complex_sub_add_8_4 = f32[8,8] subtract(add(zero_array, two_array), two_array)
  add_zero_8_5 = f32[8,8] add(half_array, zero_array)
  complex_pow_mul_8_6 = f32[8,8] power(multiply(two_array, one_array), one_array)
  complex_combo_8_combo_0 = f32[8,8] multiply(complex_pow_mul_8_6, complex_add_mul_8_1)
  complex_combo_8_combo_1 = f32[8,8] subtract(mul_zero_8_2, complex_combo_8_combo_0)
  complex_combo_8_combo_2 = f32[8,8] subtract(sub_zero_8_0, complex_combo_8_combo_1)
  ROOT result = (f32[8,8], f32[8,8], f32[8,8], f32[8,8], f32[8,8], f32[8,8], f32[8,8], f32[8,8], f32[8,8], f32[8,8]) tuple(
    sub_zero_8_0,
    complex_add_mul_8_1,
    mul_zero_8_2,
    square_sqrt_8_3,
    complex_sub_add_8_4,
    add_zero_8_5,
    complex_pow_mul_8_6,
    complex_combo_8_combo_0,
    complex_combo_8_combo_1,
    complex_combo_8_combo_2
  )
}