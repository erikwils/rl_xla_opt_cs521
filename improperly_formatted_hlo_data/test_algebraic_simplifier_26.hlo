HloModule test_algebraic_simplifier_26
ENTRY main {
  constant_e = f32[] constant(2.71828)
  constant_zero = f32[] constant(0)
  constant_two = f32[] constant(2)
  constant_neg_one = f32[] constant(-1)
  constant_half = f32[] constant(0.5)
  constant_one = f32[] constant(1)
  constant_pi = f32[] constant(3.14159)
  zero_array = f32[2,3,4] broadcast(constant_zero), dimensions={}
  one_array = f32[2,3,4] broadcast(constant_one), dimensions={}
  two_array = f32[2,3,4] broadcast(constant_two), dimensions={}
  neg_one_array = f32[2,3,4] broadcast(constant_neg_one), dimensions={}
  half_array = f32[2,3,4] broadcast(constant_half), dimensions={}
  pi_array = f32[2,3,4] broadcast(constant_pi), dimensions={}
  e_array = f32[2,3,4] broadcast(constant_e), dimensions={}
  power_zero_26_0 = f32[2,3,4] power(neg_one_array, zero_array)
  mul_one_26_1 = f32[2,3,4] multiply(one_array, one_array)
  double_neg_26_2 = f32[2,3,4] multiply(pi_array, multiply(neg_one_array, neg_one_array))
  sub_self_26_3 = f32[2,3,4] subtract(pi_array, pi_array)
  complex_add_mul_26_4 = f32[2,3,4] add(multiply(e_array, one_array), zero_array)
  mul_two_26_5 = f32[2,3,4] multiply(one_array, two_array)
  square_sqrt_26_6 = f32[2,3,4] power(sqrt(two_array), two_array)
  add_neg_26_7 = f32[2,3,4] add(one_array, neg_one_array)
  complex_combo_26_combo_0 = f32[2,3,4] add(power_zero_26_0, sub_self_26_3)
  complex_combo_26_combo_1 = f32[2,3,4] multiply(complex_combo_26_combo_0, square_sqrt_26_6)
  complex_combo_26_combo_2 = f32[2,3,4] subtract(square_sqrt_26_6, add_neg_26_7)
  ROOT result = (f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4], f32[2,3,4]) tuple(
    power_zero_26_0,
    mul_one_26_1,
    double_neg_26_2,
    sub_self_26_3,
    complex_add_mul_26_4,
    mul_two_26_5,
    square_sqrt_26_6,
    add_neg_26_7,
    complex_combo_26_combo_0,
    complex_combo_26_combo_1,
    complex_combo_26_combo_2
  )
}