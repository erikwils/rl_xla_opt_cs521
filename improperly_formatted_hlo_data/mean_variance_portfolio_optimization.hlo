HloModule jit_mean_variance_opt, entry_computation_layout={(f32[3]{0}, f32[3,3]{1,0})->f32[3]{0}}

region_1.6 {
  Arg_0.7 = s32[] parameter(0)
  ROOT Arg_1.8 = s32[] parameter(1)
}

region_2.9 {
  Arg_0.10 = s32[] parameter(0)
  ROOT Arg_1.11 = s32[] parameter(1)
}

None.12 {
  Arg_0.13 = s32[] parameter(0)
  constant.18 = s32[] constant(1)
  add.19 = s32[] add(Arg_0.13, constant.18)
  Arg_1.14 = s32[3]{0} parameter(1)
  constant.17 = s32[] constant(0)
  compare.35 = pred[] compare(Arg_0.13, constant.17), direction=LT
  constant.16 = s32[] constant(3)
  add.36 = s32[] add(Arg_0.13, constant.16)
  select.37 = s32[] select(compare.35, add.36, Arg_0.13)
  reshape.38 = s32[1]{0} reshape(select.37)
  Arg_2.15 = s32[3]{0} parameter(2)
  compare.20 = pred[] compare(Arg_0.13, constant.17), direction=LT
  add.21 = s32[] add(Arg_0.13, constant.16)
  select.22 = s32[] select(compare.20, add.21, Arg_0.13)
  reshape.23 = s32[1]{0} reshape(select.22)
  gather.24 = s32[] gather(Arg_2.15, reshape.23), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  compare.30 = pred[] compare(gather.24, constant.17), direction=LT
  add.31 = s32[] add(gather.24, constant.16)
  select.32 = s32[] select(compare.30, add.31, gather.24)
  dynamic-slice.33 = s32[1]{0} dynamic-slice(Arg_1.14, select.32), dynamic_slice_sizes={1}
  reshape.34 = s32[] reshape(dynamic-slice.33)
  scatter.39 = s32[3]{0} scatter(Arg_1.14, reshape.38, reshape.34), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_1.6
  compare.40 = pred[] compare(gather.24, constant.17), direction=LT
  add.41 = s32[] add(gather.24, constant.16)
  select.42 = s32[] select(compare.40, add.41, gather.24)
  reshape.43 = s32[1]{0} reshape(select.42)
  compare.25 = pred[] compare(Arg_0.13, constant.17), direction=LT
  add.26 = s32[] add(Arg_0.13, constant.16)
  select.27 = s32[] select(compare.25, add.26, Arg_0.13)
  reshape.28 = s32[1]{0} reshape(select.27)
  gather.29 = s32[] gather(Arg_1.14, reshape.28), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=0, slice_sizes={1}, indices_are_sorted=true
  scatter.44 = s32[3]{0} scatter(scatter.39, reshape.43, gather.29), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=0, indices_are_sorted=true, unique_indices=true, to_apply=region_2.9
  ROOT tuple.45 = (s32[], s32[3]{0}, s32[3]{0}) tuple(add.19, scatter.44, Arg_2.15)
}

region_0.46 {
  arg_tuple.47 = (s32[], s32[], s32[3]{0}, s32[3]{0}) parameter(0)
  get-tuple-element.48 = s32[] get-tuple-element(arg_tuple.47), index=0
  constant.52 = s32[] constant(1)
  add.57 = s32[] add(get-tuple-element.48, constant.52)
  get-tuple-element.49 = s32[] get-tuple-element(arg_tuple.47), index=1
  get-tuple-element.50 = s32[3]{0} get-tuple-element(arg_tuple.47), index=2
  get-tuple-element.51 = s32[3]{0} get-tuple-element(arg_tuple.47), index=3
  call.53 = (s32[], s32[3]{0}, s32[3]{0}) call(get-tuple-element.49, get-tuple-element.50, get-tuple-element.51), to_apply=None.12
  get-tuple-element.54 = s32[] get-tuple-element(call.53), index=0
  get-tuple-element.55 = s32[3]{0} get-tuple-element(call.53), index=1
  get-tuple-element.56 = s32[3]{0} get-tuple-element(call.53), index=2
  ROOT tuple.58 = (s32[], s32[], s32[3]{0}, s32[3]{0}) tuple(add.57, get-tuple-element.54, get-tuple-element.55, get-tuple-element.56)
}

region_3.59 {
  arg_tuple.60 = (s32[], s32[], s32[3]{0}, s32[3]{0}) parameter(0)
  get-tuple-element.62 = s32[] get-tuple-element(arg_tuple.60), index=1
  get-tuple-element.63 = s32[3]{0} get-tuple-element(arg_tuple.60), index=2
  get-tuple-element.64 = s32[3]{0} get-tuple-element(arg_tuple.60), index=3
  get-tuple-element.61 = s32[] get-tuple-element(arg_tuple.60), index=0
  constant.65 = s32[] constant(3)
  ROOT compare.66 = pred[] compare(get-tuple-element.61, constant.65), direction=LT
}

_lu_solve.67 {
  Arg_0.68 = f32[3,3]{1,0} parameter(0)
  Arg_2.70 = f32[3,3]{1,0} parameter(2)
  reshape.76 = f32[3,3,1]{2,1,0} reshape(Arg_2.70)
  Arg_1.69 = s32[3]{0} parameter(1)
  constant.73 = s32[] constant(0)
  broadcast.74 = s32[3]{0} broadcast(constant.73), dimensions={}
  compare.77 = pred[3]{0} compare(Arg_1.69, broadcast.74), direction=LT
  constant.71 = s32[] constant(3)
  broadcast.72 = s32[3]{0} broadcast(constant.71), dimensions={}
  add.78 = s32[3]{0} add(Arg_1.69, broadcast.72)
  select.79 = s32[3]{0} select(compare.77, add.78, Arg_1.69)
  reshape.80 = s32[3,1]{1,0} reshape(select.79)
  gather.81 = f32[3,3,1]{2,1,0} gather(reshape.76, reshape.80), offset_dims={0,2}, collapsed_slice_dims={1}, start_index_map={1}, index_vector_dim=1, slice_sizes={3,1,1}
  transpose.82 = f32[3,1,3]{1,0,2} transpose(gather.81), dimensions={1,2,0}
  reshape.83 = f32[3,3]{1,0} reshape(transpose.82)
  constant.75 = f32[] constant(1)
  custom-call.84 = f32[3,3]{0,1} custom-call(Arg_0.68, reshape.83, constant.75), custom_call_target="lapack_strsm_ffi", operand_layout_constraints={f32[3,3]{0,1}, f32[3,3]{0,1}, f32[]}, output_to_operand_aliasing={{}: (1, {})}, api_version=API_VERSION_TYPED_FFI
  custom-call.85 = f32[3,3]{0,1} custom-call(Arg_0.68, custom-call.84, constant.75), custom_call_target="lapack_strsm_ffi", operand_layout_constraints={f32[3,3]{0,1}, f32[3,3]{0,1}, f32[]}, output_to_operand_aliasing={{}: (1, {})}, api_version=API_VERSION_TYPED_FFI
  reshape.86 = f32[3,1,3]{2,1,0} reshape(custom-call.85)
  transpose.87 = f32[3,3,1]{0,2,1} transpose(reshape.86), dimensions={2,0,1}
  ROOT reshape.88 = f32[3,3]{1,0} reshape(transpose.87)
}

solve.89 {
  constant.96 = s32[] constant(0)
  iota.108 = s32[3]{0} iota(), iota_dimension=0
  Arg_0.90 = f32[3,3]{1,0} parameter(0)
  custom-call.97 = (f32[3,3]{0,1}, s32[3]{0}, s32[]) custom-call(Arg_0.90), custom_call_target="lapack_sgetrf_ffi", operand_layout_constraints={f32[3,3]{0,1}}, output_to_operand_aliasing={{0}: (0, {})}, api_version=API_VERSION_TYPED_FFI
  get-tuple-element.99 = s32[3]{0} get-tuple-element(custom-call.97), index=1
  constant.94 = s32[] constant(1)
  broadcast.95 = s32[3]{0} broadcast(constant.94), dimensions={}
  subtract.101 = s32[3]{0} subtract(get-tuple-element.99, broadcast.95)
  tuple.109 = (s32[], s32[], s32[3]{0}, s32[3]{0}) tuple(constant.96, constant.96, iota.108, subtract.101)
  while.110 = (s32[], s32[], s32[3]{0}, s32[3]{0}) while(tuple.109), condition=region_3.59, body=region_0.46
  get-tuple-element.111 = s32[] get-tuple-element(while.110), index=0
  get-tuple-element.112 = s32[] get-tuple-element(while.110), index=1
  get-tuple-element.114 = s32[3]{0} get-tuple-element(while.110), index=3
  get-tuple-element.100 = s32[] get-tuple-element(custom-call.97), index=2
  compare.102 = pred[] compare(get-tuple-element.100, constant.96), direction=GE
  reshape.103 = pred[1,1]{1,0} reshape(compare.102)
  broadcast.104 = pred[1,1]{1,0} broadcast(reshape.103), dimensions={0,1}
  reshape.105 = pred[] reshape(broadcast.104)
  broadcast.106 = pred[3,3]{1,0} broadcast(reshape.105), dimensions={}
  get-tuple-element.98 = f32[3,3]{0,1} get-tuple-element(custom-call.97), index=0
  constant.92 = f32[] constant(nan)
  broadcast.93 = f32[3,3]{1,0} broadcast(constant.92), dimensions={}
  select.107 = f32[3,3]{1,0} select(broadcast.106, get-tuple-element.98, broadcast.93)
  get-tuple-element.113 = s32[3]{0} get-tuple-element(while.110), index=2
  Arg_1.91 = f32[3,3]{1,0} parameter(1)
  transpose.115 = f32[3,3]{0,1} transpose(Arg_1.91), dimensions={1,0}
  call.116 = f32[3,3]{1,0} call(select.107, get-tuple-element.113, transpose.115), to_apply=_lu_solve.67
  ROOT transpose.117 = f32[3,3]{0,1} transpose(call.116), dimensions={1,0}
}

inv.118 {
  Arg_0.119 = f32[3,3]{1,0} parameter(0)
  iota.120 = s32[3]{0} iota(), iota_dimension=0
  broadcast.121 = s32[3,3]{1,0} broadcast(iota.120), dimensions={0}
  iota.122 = s32[3]{0} iota(), iota_dimension=0
  broadcast.123 = s32[3,3]{1,0} broadcast(iota.122), dimensions={1}
  compare.124 = pred[3,3]{1,0} compare(broadcast.121, broadcast.123), direction=EQ
  convert.125 = f32[3,3]{1,0} convert(compare.124)
  ROOT call.126 = f32[3,3]{0,1} call(Arg_0.119, convert.125), to_apply=solve.89
}

region_4.129 {
  Arg_0.130 = f32[] parameter(0)
  Arg_1.131 = f32[] parameter(1)
  ROOT add.132 = f32[] add(Arg_0.130, Arg_1.131)
}

_where.142 {
  Arg_0.143 = pred[] parameter(0)
  broadcast.146 = pred[3]{0} broadcast(Arg_0.143), dimensions={}
  Arg_1.144 = f32[3]{0} parameter(1)
  Arg_2.145 = f32[3]{0} parameter(2)
  ROOT select.147 = f32[3]{0} select(broadcast.146, Arg_1.144, Arg_2.145)
}

ENTRY main.149 {
  Arg_1.2 = f32[3,3]{1,0} parameter(1)
  call.127 = f32[3,3]{0,1} call(Arg_1.2), to_apply=inv.118
  Arg_0.1 = f32[3]{0} parameter(0)
  dot.128 = f32[3]{0} dot(call.127, Arg_0.1), lhs_contracting_dims={1}, rhs_contracting_dims={0}
  constant.5 = f32[] constant(0)
  reduce.133 = f32[] reduce(dot.128, constant.5), dimensions={0}, to_apply=region_4.129
  abs.134 = f32[] abs(reduce.133)
  constant.4 = f32[] constant(1e-09)
  compare.135 = pred[] compare(abs.134, constant.4), direction=LT
  sign.136 = f32[] sign(reduce.133)
  multiply.137 = f32[] multiply(sign.136, constant.4)
  add.138 = f32[] add(reduce.133, multiply.137)
  constant.3 = f32[] constant(1e-12)
  add.139 = f32[] add(add.138, constant.3)
  broadcast.140 = f32[3]{0} broadcast(add.139), dimensions={}
  divide.141 = f32[3]{0} divide(dot.128, broadcast.140)
  ROOT call.148 = f32[3]{0} call(compare.135, dot.128, divide.141), to_apply=_where.142
}

